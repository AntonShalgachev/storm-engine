// Упаковка нормали:
//============================================================================================
//DWORD PackNormal (const Vector& normal)
//{
//	Vector n = !normal;
//	BYTE p_nx = (unsigned char)(n.x*127.5 + 127.5);
//	BYTE p_ny = (unsigned char)(n.y*127.5 + 127.5);
//	BYTE p_nz = (unsigned char)(n.z*127.5 + 127.5);
//	BYTE p_nw = 0;
//	DWORD packed_normal = ((p_nw << 24) | (p_nx << 16) | (p_ny << 8) | p_nz);
//	return packed_normal;
//}
//
// Декларация упакованной нормали:
//============================================================================================
//PackedNormal = Color;
//
// Распаковка нормали:
//============================================================================================
//Normal = (PackNormal * 2.0f) - 1.0f
#define UNPACK_NORMAL(_VRESULT, _VPACKED_NORMAL)	mad _VRESULT.xyz, c[GC_CONSTANT2].xxx, _VPACKED_NORMAL.xyz, c[GC_CONSTANT2].yyy


// Упаковка текстурной координаты:
//============================================================================================
//short PackTextCoord (float tc)
//{
//	tc = tc * (32767.5f / 12.0f);
//	return (short)tc;
//}
//
// Декларация упакованых текстурных координат:
//============================================================================================
// short2 UV;
//
// Распаковка сразу 2-х текстурных координат U и V:
//============================================================================================
//TexCoord = (PackedTex * (12.0f / 32767.5.0f))
#define UNPACK_TEX(_VRESULT, _VPACKED_TEX) mul _VRESULT, _VPACKED_TEX, c[GC_CONSTANT2].zzzz \
mov _VRESULT.w, c[GC_CONSTANT].y


// Упаковка веса:
//============================================================================================
//short PackWeight (float w)
//{
//	if (w < 0.0f) w = 0.0f;
//	if (w > 1.0f) w = 1.0f;
//	w =	((w * 2.0f) - 1.0f);
//	w = (w * 32767.5f);
//	return (short)w;
//}
//
// Декларация упакованых весов:
//============================================================================================
// short2 Weight1_and_Weight2;
//
// Распаковка сразу 2-х весов:
//============================================================================================
//PackedWeight[2] = short2 Weight1, short2 Weight2;
//Weight = (PackedWeight * (0.5f / 32767.5f)) + 0.5f
#define UNPACK_WEIGHTS(_VRESULT, _VPACKED_WEIGHT)	mad _VRESULT, c[GC_CONSTANT].w, _VPACKED_WEIGHT, c[GC_CONSTANT].z





