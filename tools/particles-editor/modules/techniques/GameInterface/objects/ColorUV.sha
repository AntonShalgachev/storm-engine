vertexshader vs_GI_ColorUV()
{
	decl
	{
		stream(0)
		{
			vector3		vPos; // Pos;
			color		vCol; // Color;
			vector2		vTex; // TexCoord0;
		}
	}

	asm
	{
		vs.1.1

		m4x4		oPos, vPos, c[GC_FREE]
		mov		oD0, vCol
		mov		oT0, vTex
	}
}

block GI_ColorUV_2D()
{
		CullMode = none;
		FogEnable = false;
		AlphaBlendEnable = true;
		AlphaTestEnable = false;
		zenable = false;

		ColorOp[0] = modulate;
		ColorArg1[0] = diffuse;
		ColorArg2[0] = texture;

		AlphaOp[0] = modulate;
		AlphaArg1[0] = diffuse;
		AlphaArg2[0] = texture;

		VertexShaderConstant[GC_FREE] = matrix();
		VertexShader = vs_GI_ColorUV();
		Draw ();
}

block GI_ColorUV_2D_Mod2X()
{
		CullMode = none;
		FogEnable = false;
		AlphaBlendEnable = true;
		AlphaTestEnable = false;
		zenable = false;

		ColorOp[0] = modulate2x;
		ColorArg1[0] = diffuse;
		ColorArg2[0] = texture;

		AlphaOp[0] = modulate;
		AlphaArg1[0] = diffuse;
		AlphaArg2[0] = texture;

		VertexShaderConstant[GC_FREE] = matrix();
		VertexShader = vs_GI_ColorUV();
		Draw ();
}

block GI_ColorUV_3D()
{
		CullMode = none;
		FogEnable = false;
		AlphaBlendEnable = true;
		AlphaTestEnable = true;
		zenable = true;

		ColorOp[0] = modulate;
		ColorArg1[0] = diffuse;
		ColorArg2[0] = texture;

		AlphaOp[0] = modulate;
		AlphaArg1[0] = diffuse;
		AlphaArg2[0] = texture;

		VertexShaderConstant[GC_FREE] = mProjection;
		VertexShader = vs_GI_ColorUV();
		Draw ();
}
